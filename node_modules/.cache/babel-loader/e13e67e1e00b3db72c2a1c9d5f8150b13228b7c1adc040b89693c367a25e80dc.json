{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/admin/Desktop/an/sneaker/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _createForOfIteratorHelper from \"C:/Users/admin/Desktop/an/sneaker/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _asyncToGenerator from \"C:/Users/admin/Desktop/an/sneaker/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _slicedToArray from \"C:/Users/admin/Desktop/an/sneaker/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _objectSpread from \"C:/Users/admin/Desktop/an/sneaker/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport React, { useEffect, useLayoutEffect, createContext, useContext, useMemo, useRef, createElement } from 'react';\n\n// Shared state between server components and client components\nvar noop = function noop() {};\n// Using noop() as the undefined value as undefined can be replaced\n// by something else. Prettier ignore and extra parentheses are necessary here\n// to ensure that tsc doesn't remove the __NOINLINE__ comment.\n// prettier-ignore\nvar UNDEFINED = /*#__NOINLINE__*/noop();\nvar OBJECT = Object;\nvar isUndefined = function isUndefined(v) {\n  return v === UNDEFINED;\n};\nvar isFunction = function isFunction(v) {\n  return typeof v == 'function';\n};\nvar mergeObjects = function mergeObjects(a, b) {\n  return _objectSpread(_objectSpread({}, a), b);\n};\nvar isPromiseLike = function isPromiseLike(x) {\n  return isFunction(x.then);\n};\n\n// use WeakMap to store the object->key mapping\n// so the objects can be garbage collected.\n// WeakMap uses a hashtable under the hood, so the lookup\n// complexity is almost O(1).\nvar table = new WeakMap();\n// counter of the key\nvar counter = 0;\n// A stable hash implementation that supports:\n// - Fast and ensures unique hash properties\n// - Handles unserializable values\n// - Handles object key ordering\n// - Generates short results\n//\n// This is not a serialization function, and the result is not guaranteed to be\n// parsable.\nvar stableHash = function stableHash(arg) {\n  var type = typeof arg;\n  var constructor = arg && arg.constructor;\n  var isDate = constructor == Date;\n  var result;\n  var index;\n  if (OBJECT(arg) === arg && !isDate && constructor != RegExp) {\n    // Object/function, not null/date/regexp. Use WeakMap to store the id first.\n    // If it's already hashed, directly return the result.\n    result = table.get(arg);\n    if (result) return result;\n    // Store the hash first for circular reference detection before entering the\n    // recursive `stableHash` calls.\n    // For other objects like set and map, we use this id directly as the hash.\n    result = ++counter + '~';\n    table.set(arg, result);\n    if (constructor == Array) {\n      // Array.\n      result = '@';\n      for (index = 0; index < arg.length; index++) {\n        result += stableHash(arg[index]) + ',';\n      }\n      table.set(arg, result);\n    }\n    if (constructor == OBJECT) {\n      // Object, sort keys.\n      result = '#';\n      var keys = OBJECT.keys(arg).sort();\n      while (!isUndefined(index = keys.pop())) {\n        if (!isUndefined(arg[index])) {\n          result += index + ':' + stableHash(arg[index]) + ',';\n        }\n      }\n      table.set(arg, result);\n    }\n  } else {\n    result = isDate ? arg.toJSON() : type == 'symbol' ? arg.toString() : type == 'string' ? JSON.stringify(arg) : '' + arg;\n  }\n  return result;\n};\n\n// Global state used to deduplicate requests and store listeners\nvar SWRGlobalState = new WeakMap();\nvar EMPTY_CACHE = {};\nvar INITIAL_CACHE = {};\nvar STR_UNDEFINED = 'undefined';\n// NOTE: Use the function to guarantee it's re-evaluated between jsdom and node runtime for tests.\nvar isWindowDefined = typeof window != STR_UNDEFINED;\nvar isDocumentDefined = typeof document != STR_UNDEFINED;\nvar hasRequestAnimationFrame = function hasRequestAnimationFrame() {\n  return isWindowDefined && typeof window['requestAnimationFrame'] != STR_UNDEFINED;\n};\nvar createCacheHelper = function createCacheHelper(cache, key) {\n  var state = SWRGlobalState.get(cache);\n  return [\n  // Getter\n  function () {\n    return !isUndefined(key) && cache.get(key) || EMPTY_CACHE;\n  },\n  // Setter\n  function (info) {\n    if (!isUndefined(key)) {\n      var prev = cache.get(key);\n      // Before writing to the store, we keep the value in the initial cache\n      // if it's not there yet.\n      if (!(key in INITIAL_CACHE)) {\n        INITIAL_CACHE[key] = prev;\n      }\n      state[5](key, mergeObjects(prev, info), prev || EMPTY_CACHE);\n    }\n  },\n  // Subscriber\n  state[6],\n  // Get server cache snapshot\n  function () {\n    if (!isUndefined(key)) {\n      // If the cache was updated on the client, we return the stored initial value.\n      if (key in INITIAL_CACHE) return INITIAL_CACHE[key];\n    }\n    // If we haven't done any client-side updates, we return the current value.\n    return !isUndefined(key) && cache.get(key) || EMPTY_CACHE;\n  }];\n} // export { UNDEFINED, OBJECT, isUndefined, isFunction, mergeObjects, isPromiseLike }\n;\n\n/**\r\n * Due to the bug https://bugs.chromium.org/p/chromium/issues/detail?id=678075,\r\n * it's not reliable to detect if the browser is currently online or offline\r\n * based on `navigator.onLine`.\r\n * As a workaround, we always assume it's online on the first load, and change\r\n * the status upon `online` or `offline` events.\r\n */\nvar online = true;\nvar isOnline = function isOnline() {\n  return online;\n};\n// For node and React Native, `add/removeEventListener` doesn't exist on window.\nvar _ref = isWindowDefined && window.addEventListener ? [window.addEventListener.bind(window), window.removeEventListener.bind(window)] : [noop, noop],\n  _ref2 = _slicedToArray(_ref, 2),\n  onWindowEvent = _ref2[0],\n  offWindowEvent = _ref2[1];\nvar isVisible = function isVisible() {\n  var visibilityState = isDocumentDefined && document.visibilityState;\n  return isUndefined(visibilityState) || visibilityState !== 'hidden';\n};\nvar initFocus = function initFocus(callback) {\n  // focus revalidate\n  if (isDocumentDefined) {\n    document.addEventListener('visibilitychange', callback);\n  }\n  onWindowEvent('focus', callback);\n  return function () {\n    if (isDocumentDefined) {\n      document.removeEventListener('visibilitychange', callback);\n    }\n    offWindowEvent('focus', callback);\n  };\n};\nvar initReconnect = function initReconnect(callback) {\n  // revalidate on reconnected\n  var onOnline = function onOnline() {\n    online = true;\n    callback();\n  };\n  // nothing to revalidate, just update the status\n  var onOffline = function onOffline() {\n    online = false;\n  };\n  onWindowEvent('online', onOnline);\n  onWindowEvent('offline', onOffline);\n  return function () {\n    offWindowEvent('online', onOnline);\n    offWindowEvent('offline', onOffline);\n  };\n};\nvar preset = {\n  isOnline: isOnline,\n  isVisible: isVisible\n};\nvar defaultConfigOptions = {\n  initFocus: initFocus,\n  initReconnect: initReconnect\n};\nvar IS_REACT_LEGACY = !React.useId;\nvar IS_SERVER = !isWindowDefined || 'Deno' in window;\n// Polyfill requestAnimationFrame\nvar rAF = function rAF(f) {\n  return hasRequestAnimationFrame() ? window['requestAnimationFrame'](f) : setTimeout(f, 1);\n};\n// React currently throws a warning when using useLayoutEffect on the server.\n// To get around it, we can conditionally useEffect on the server (no-op) and\n// useLayoutEffect in the browser.\nvar useIsomorphicLayoutEffect = IS_SERVER ? useEffect : useLayoutEffect;\n// This assignment is to extend the Navigator type to use effectiveType.\nvar navigatorConnection = typeof navigator !== 'undefined' && navigator.connection;\n// Adjust the config based on slow connection status (<= 70Kbps).\nvar slowConnection = !IS_SERVER && navigatorConnection && (['slow-2g', '2g'].includes(navigatorConnection.effectiveType) || navigatorConnection.saveData);\nvar serialize = function serialize(key) {\n  if (isFunction(key)) {\n    try {\n      key = key();\n    } catch (err) {\n      // dependencies not ready\n      key = '';\n    }\n  }\n  // Use the original key as the argument of fetcher. This can be a string or an\n  // array of values.\n  var args = key;\n  // If key is not falsy, or not an empty array, hash it.\n  key = typeof key == 'string' ? key : (Array.isArray(key) ? key.length : key) ? stableHash(key) : '';\n  return [key, args];\n};\n\n// Global timestamp.\nvar __timestamp = 0;\nvar getTimestamp = function getTimestamp() {\n  return ++__timestamp;\n};\nvar FOCUS_EVENT = 0;\nvar RECONNECT_EVENT = 1;\nvar MUTATE_EVENT = 2;\nvar ERROR_REVALIDATE_EVENT = 3;\nvar events = {\n  __proto__: null,\n  ERROR_REVALIDATE_EVENT: ERROR_REVALIDATE_EVENT,\n  FOCUS_EVENT: FOCUS_EVENT,\n  MUTATE_EVENT: MUTATE_EVENT,\n  RECONNECT_EVENT: RECONNECT_EVENT\n};\nfunction internalMutate() {\n  return _internalMutate.apply(this, arguments);\n}\nfunction _internalMutate() {\n  _internalMutate = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n    var _len,\n      args,\n      _key2,\n      cache,\n      _key,\n      _data,\n      _opts,\n      options,\n      populateCache,\n      rollbackOnErrorOption,\n      optimisticData,\n      revalidate,\n      rollbackOnError,\n      throwOnError,\n      keyFilter,\n      matchedKeys,\n      it,\n      _iterator2,\n      _step2,\n      key,\n      mutateByKey,\n      _mutateByKey,\n      _args2 = arguments;\n    return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n      while (1) switch (_context2.prev = _context2.next) {\n        case 0:\n          _mutateByKey = function _mutateByKey3() {\n            _mutateByKey = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(_k) {\n              var _serialize5, _serialize6, key, _createCacheHelper, _createCacheHelper2, get, set, _SWRGlobalState$get5, _SWRGlobalState$get6, EVENT_REVALIDATORS, MUTATION, FETCH, PRELOAD, startRevalidate, data, error, beforeMutationTs, hasOptimisticData, state, displayedData, currentData, committedData, populateCachedData;\n              return _regeneratorRuntime().wrap(function _callee$(_context) {\n                while (1) switch (_context.prev = _context.next) {\n                  case 0:\n                    // Serialize key\n                    _serialize5 = serialize(_k), _serialize6 = _slicedToArray(_serialize5, 1), key = _serialize6[0];\n                    if (key) {\n                      _context.next = 3;\n                      break;\n                    }\n                    return _context.abrupt(\"return\");\n                  case 3:\n                    _createCacheHelper = createCacheHelper(cache, key), _createCacheHelper2 = _slicedToArray(_createCacheHelper, 2), get = _createCacheHelper2[0], set = _createCacheHelper2[1];\n                    _SWRGlobalState$get5 = SWRGlobalState.get(cache), _SWRGlobalState$get6 = _slicedToArray(_SWRGlobalState$get5, 4), EVENT_REVALIDATORS = _SWRGlobalState$get6[0], MUTATION = _SWRGlobalState$get6[1], FETCH = _SWRGlobalState$get6[2], PRELOAD = _SWRGlobalState$get6[3];\n                    startRevalidate = function startRevalidate() {\n                      var revalidators = EVENT_REVALIDATORS[key];\n                      if (revalidate) {\n                        // Invalidate the key by deleting the concurrent request markers so new\n                        // requests will not be deduped.\n                        delete FETCH[key];\n                        delete PRELOAD[key];\n                        if (revalidators && revalidators[0]) {\n                          return revalidators[0](MUTATE_EVENT).then(function () {\n                            return get().data;\n                          });\n                        }\n                      }\n                      return get().data;\n                    }; // If there is no new data provided, revalidate the key with current state.\n                    if (!(args.length < 3)) {\n                      _context.next = 8;\n                      break;\n                    }\n                    return _context.abrupt(\"return\", startRevalidate());\n                  case 8:\n                    data = _data;\n                    // Update global timestamps.\n                    beforeMutationTs = getTimestamp();\n                    MUTATION[key] = [beforeMutationTs, 0];\n                    hasOptimisticData = !isUndefined(optimisticData);\n                    state = get(); // `displayedData` is the current value on screen. It could be the optimistic value\n                    // that is going to be overridden by a `committedData`, or get reverted back.\n                    // `committedData` is the validated value that comes from a fetch or mutation.\n                    displayedData = state.data;\n                    currentData = state._c;\n                    committedData = isUndefined(currentData) ? displayedData : currentData; // Do optimistic data update.\n                    if (hasOptimisticData) {\n                      optimisticData = isFunction(optimisticData) ? optimisticData(committedData, displayedData) : optimisticData;\n                      // When we set optimistic data, backup the current committedData data in `_c`.\n                      set({\n                        data: optimisticData,\n                        _c: committedData\n                      });\n                    }\n                    if (isFunction(data)) {\n                      // `data` is a function, call it passing current cache value.\n                      try {\n                        data = data(committedData);\n                      } catch (err) {\n                        // If it throws an error synchronously, we shouldn't update the cache.\n                        error = err;\n                      }\n                    }\n                    // `data` is a promise/thenable, resolve the final data first.\n                    if (!(data && isPromiseLike(data))) {\n                      _context.next = 29;\n                      break;\n                    }\n                    _context.next = 21;\n                    return data.catch(function (err) {\n                      error = err;\n                    });\n                  case 21:\n                    data = _context.sent;\n                    if (!(beforeMutationTs !== MUTATION[key][0])) {\n                      _context.next = 28;\n                      break;\n                    }\n                    if (!error) {\n                      _context.next = 25;\n                      break;\n                    }\n                    throw error;\n                  case 25:\n                    return _context.abrupt(\"return\", data);\n                  case 28:\n                    if (error && hasOptimisticData && rollbackOnError(error)) {\n                      // Rollback. Always populate the cache in this case but without\n                      // transforming the data.\n                      populateCache = true;\n                      // Reset data to be the latest committed data, and clear the `_c` value.\n                      set({\n                        data: committedData,\n                        _c: UNDEFINED\n                      });\n                    }\n                  case 29:\n                    // If we should write back the cache after request.\n                    if (populateCache) {\n                      if (!error) {\n                        // Transform the result into data.\n                        if (isFunction(populateCache)) {\n                          populateCachedData = populateCache(data, committedData);\n                          set({\n                            data: populateCachedData,\n                            error: UNDEFINED,\n                            _c: UNDEFINED\n                          });\n                        } else {\n                          // Only update cached data and reset the error if there's no error. Data can be `undefined` here.\n                          set({\n                            data: data,\n                            error: UNDEFINED,\n                            _c: UNDEFINED\n                          });\n                        }\n                      }\n                    }\n                    // Reset the timestamp to mark the mutation has ended.\n                    MUTATION[key][1] = getTimestamp();\n                    // Update existing SWR Hooks' internal states:\n                    Promise.resolve(startRevalidate()).then(function () {\n                      // The mutation and revalidation are ended, we can clear it since the data is\n                      // not an optimistic value anymore.\n                      set({\n                        _c: UNDEFINED\n                      });\n                    });\n                    // Throw error or return data\n                    if (!error) {\n                      _context.next = 36;\n                      break;\n                    }\n                    if (!throwOnError) {\n                      _context.next = 35;\n                      break;\n                    }\n                    throw error;\n                  case 35:\n                    return _context.abrupt(\"return\");\n                  case 36:\n                    return _context.abrupt(\"return\", data);\n                  case 37:\n                  case \"end\":\n                    return _context.stop();\n                }\n              }, _callee);\n            }));\n            return _mutateByKey.apply(this, arguments);\n          };\n          mutateByKey = function _mutateByKey2(_x) {\n            return _mutateByKey.apply(this, arguments);\n          };\n          for (_len = _args2.length, args = new Array(_len), _key2 = 0; _key2 < _len; _key2++) {\n            args[_key2] = _args2[_key2];\n          }\n          cache = args[0], _key = args[1], _data = args[2], _opts = args[3]; // When passing as a boolean, it's explicitly used to disable/enable\n          // revalidation.\n          options = mergeObjects({\n            populateCache: true,\n            throwOnError: true\n          }, typeof _opts === 'boolean' ? {\n            revalidate: _opts\n          } : _opts || {});\n          populateCache = options.populateCache;\n          rollbackOnErrorOption = options.rollbackOnError;\n          optimisticData = options.optimisticData;\n          revalidate = options.revalidate !== false;\n          rollbackOnError = function rollbackOnError(error) {\n            return typeof rollbackOnErrorOption === 'function' ? rollbackOnErrorOption(error) : rollbackOnErrorOption !== false;\n          };\n          throwOnError = options.throwOnError; // If the second argument is a key filter, return the mutation results for all\n          // filtered keys.\n          if (!isFunction(_key)) {\n            _context2.next = 18;\n            break;\n          }\n          keyFilter = _key;\n          matchedKeys = [];\n          it = cache.keys();\n          _iterator2 = _createForOfIteratorHelper(it);\n          try {\n            for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n              key = _step2.value;\n              if (\n              // Skip the special useSWRInfinite and useSWRSubscription keys.\n              !/^\\$(inf|sub)\\$/.test(key) && keyFilter(cache.get(key)._k)) {\n                matchedKeys.push(key);\n              }\n            }\n          } catch (err) {\n            _iterator2.e(err);\n          } finally {\n            _iterator2.f();\n          }\n          return _context2.abrupt(\"return\", Promise.all(matchedKeys.map(mutateByKey)));\n        case 18:\n          return _context2.abrupt(\"return\", mutateByKey(_key));\n        case 19:\n        case \"end\":\n          return _context2.stop();\n      }\n    }, _callee2);\n  }));\n  return _internalMutate.apply(this, arguments);\n}\nvar revalidateAllKeys = function revalidateAllKeys(revalidators, type) {\n  for (var key in revalidators) {\n    if (revalidators[key][0]) revalidators[key][0](type);\n  }\n};\nvar initCache = function initCache(provider, options) {\n  // The global state for a specific provider will be used to deduplicate\n  // requests and store listeners. As well as a mutate function that is bound to\n  // the cache.\n  // The provider's global state might be already initialized. Let's try to get the\n  // global state associated with the provider first.\n  if (!SWRGlobalState.has(provider)) {\n    var opts = mergeObjects(defaultConfigOptions, options);\n    // If there's no global state bound to the provider, create a new one with the\n    // new mutate function.\n    var EVENT_REVALIDATORS = {};\n    var _mutate = internalMutate.bind(UNDEFINED, provider);\n    var unmount = noop;\n    var subscriptions = {};\n    var subscribe = function subscribe(key, callback) {\n      var subs = subscriptions[key] || [];\n      subscriptions[key] = subs;\n      subs.push(callback);\n      return function () {\n        return subs.splice(subs.indexOf(callback), 1);\n      };\n    };\n    var setter = function setter(key, value, prev) {\n      provider.set(key, value);\n      var subs = subscriptions[key];\n      if (subs) {\n        var _iterator = _createForOfIteratorHelper(subs),\n          _step;\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var fn = _step.value;\n            fn(value, prev);\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n      }\n    };\n    var initProvider = function initProvider() {\n      if (!SWRGlobalState.has(provider)) {\n        // Update the state if it's new, or if the provider has been extended.\n        SWRGlobalState.set(provider, [EVENT_REVALIDATORS, {}, {}, {}, _mutate, setter, subscribe]);\n        if (!IS_SERVER) {\n          // When listening to the native events for auto revalidations,\n          // we intentionally put a delay (setTimeout) here to make sure they are\n          // fired after immediate JavaScript executions, which can be\n          // React's state updates.\n          // This avoids some unnecessary revalidations such as\n          // https://github.com/vercel/swr/issues/1680.\n          var releaseFocus = opts.initFocus(setTimeout.bind(UNDEFINED, revalidateAllKeys.bind(UNDEFINED, EVENT_REVALIDATORS, FOCUS_EVENT)));\n          var releaseReconnect = opts.initReconnect(setTimeout.bind(UNDEFINED, revalidateAllKeys.bind(UNDEFINED, EVENT_REVALIDATORS, RECONNECT_EVENT)));\n          unmount = function unmount() {\n            releaseFocus && releaseFocus();\n            releaseReconnect && releaseReconnect();\n            // When un-mounting, we need to remove the cache provider from the state\n            // storage too because it's a side-effect. Otherwise, when re-mounting we\n            // will not re-register those event listeners.\n            SWRGlobalState.delete(provider);\n          };\n        }\n      }\n    };\n    initProvider();\n    // This is a new provider, we need to initialize it and setup DOM events\n    // listeners for `focus` and `reconnect` actions.\n    // We might want to inject an extra layer on top of `provider` in the future,\n    // such as key serialization, auto GC, etc.\n    // For now, it's just a `Map` interface without any modifications.\n    return [provider, _mutate, initProvider, unmount];\n  }\n  return [provider, SWRGlobalState.get(provider)[4]];\n};\n\n// error retry\nvar onErrorRetry = function onErrorRetry(_, __, config, revalidate, opts) {\n  var maxRetryCount = config.errorRetryCount;\n  var currentRetryCount = opts.retryCount;\n  // Exponential backoff\n  var timeout = ~~((Math.random() + 0.5) * (1 << (currentRetryCount < 8 ? currentRetryCount : 8))) * config.errorRetryInterval;\n  if (!isUndefined(maxRetryCount) && currentRetryCount > maxRetryCount) {\n    return;\n  }\n  setTimeout(revalidate, timeout, opts);\n};\nvar compare = function compare(currentData, newData) {\n  return stableHash(currentData) == stableHash(newData);\n};\n// Default cache provider\nvar _initCache = initCache(new Map()),\n  _initCache2 = _slicedToArray(_initCache, 2),\n  cache = _initCache2[0],\n  mutate = _initCache2[1];\n// Default config\nvar defaultConfig = mergeObjects({\n  // events\n  onLoadingSlow: noop,\n  onSuccess: noop,\n  onError: noop,\n  onErrorRetry: onErrorRetry,\n  onDiscarded: noop,\n  // switches\n  revalidateOnFocus: true,\n  revalidateOnReconnect: true,\n  revalidateIfStale: true,\n  shouldRetryOnError: true,\n  // timeouts\n  errorRetryInterval: slowConnection ? 10000 : 5000,\n  focusThrottleInterval: 5 * 1000,\n  dedupingInterval: 2 * 1000,\n  loadingTimeout: slowConnection ? 5000 : 3000,\n  // providers\n  compare: compare,\n  isPaused: function isPaused() {\n    return false;\n  },\n  cache: cache,\n  mutate: mutate,\n  fallback: {}\n},\n// use web preset by default\npreset);\nvar mergeConfigs = function mergeConfigs(a, b) {\n  // Need to create a new object to avoid mutating the original here.\n  var v = mergeObjects(a, b);\n  // If two configs are provided, merge their `use` and `fallback` options.\n  if (b) {\n    var u1 = a.use,\n      f1 = a.fallback;\n    var u2 = b.use,\n      f2 = b.fallback;\n    if (u1 && u2) {\n      v.use = u1.concat(u2);\n    }\n    if (f1 && f2) {\n      v.fallback = mergeObjects(f1, f2);\n    }\n  }\n  return v;\n};\nvar SWRConfigContext = createContext({});\nvar SWRConfig = function SWRConfig(props) {\n  var value = props.value;\n  var parentConfig = useContext(SWRConfigContext);\n  var isFunctionalConfig = isFunction(value);\n  var config = useMemo(function () {\n    return isFunctionalConfig ? value(parentConfig) : value;\n  }, [isFunctionalConfig, parentConfig, value]);\n  // Extend parent context values and middleware.\n  var extendedConfig = useMemo(function () {\n    return isFunctionalConfig ? config : mergeConfigs(parentConfig, config);\n  }, [isFunctionalConfig, parentConfig, config]);\n  // Should not use the inherited provider.\n  var provider = config && config.provider;\n  // initialize the cache only on first access.\n  var cacheContextRef = useRef(UNDEFINED);\n  if (provider && !cacheContextRef.current) {\n    cacheContextRef.current = initCache(provider(extendedConfig.cache || cache), config);\n  }\n  var cacheContext = cacheContextRef.current;\n  // Override the cache if a new provider is given.\n  if (cacheContext) {\n    extendedConfig.cache = cacheContext[0];\n    extendedConfig.mutate = cacheContext[1];\n  }\n  // Unsubscribe events.\n  useIsomorphicLayoutEffect(function () {\n    if (cacheContext) {\n      cacheContext[2] && cacheContext[2]();\n      return cacheContext[3];\n    }\n  }, []);\n  return createElement(SWRConfigContext.Provider, mergeObjects(props, {\n    value: extendedConfig\n  }));\n};\nvar INFINITE_PREFIX = '$inf$';\n\n// @ts-expect-error\nvar enableDevtools = isWindowDefined && window.__SWR_DEVTOOLS_USE__;\nvar use = enableDevtools ? window.__SWR_DEVTOOLS_USE__ : [];\nvar setupDevTools = function setupDevTools() {\n  if (enableDevtools) {\n    // @ts-expect-error\n    window.__SWR_DEVTOOLS_REACT__ = React;\n  }\n};\nvar normalize = function normalize(args) {\n  return isFunction(args[1]) ? [args[0], args[1], args[2] || {}] : [args[0], null, (args[1] === null ? args[2] : args[1]) || {}];\n};\nvar useSWRConfig = function useSWRConfig() {\n  return mergeObjects(defaultConfig, useContext(SWRConfigContext));\n};\nvar preload = function preload(key_, fetcher) {\n  var _serialize = serialize(key_),\n    _serialize2 = _slicedToArray(_serialize, 2),\n    key = _serialize2[0],\n    fnArg = _serialize2[1];\n  var _SWRGlobalState$get = SWRGlobalState.get(cache),\n    _SWRGlobalState$get2 = _slicedToArray(_SWRGlobalState$get, 4),\n    PRELOAD = _SWRGlobalState$get2[3];\n  // Prevent preload to be called multiple times before used.\n  if (PRELOAD[key]) return PRELOAD[key];\n  var req = fetcher(fnArg);\n  PRELOAD[key] = req;\n  return req;\n};\nvar middleware = function middleware(useSWRNext) {\n  return function (key_, fetcher_, config) {\n    // fetcher might be a sync function, so this should not be an async function\n    var fetcher = fetcher_ && function () {\n      var _serialize3 = serialize(key_),\n        _serialize4 = _slicedToArray(_serialize3, 1),\n        key = _serialize4[0];\n      var _SWRGlobalState$get3 = SWRGlobalState.get(cache),\n        _SWRGlobalState$get4 = _slicedToArray(_SWRGlobalState$get3, 4),\n        PRELOAD = _SWRGlobalState$get4[3];\n      if (key.startsWith(INFINITE_PREFIX)) {\n        // we want the infinite fetcher to be called.\n        // handling of the PRELOAD cache happens there.\n        return fetcher_.apply(void 0, arguments);\n      }\n      var req = PRELOAD[key];\n      if (isUndefined(req)) return fetcher_.apply(void 0, arguments);\n      delete PRELOAD[key];\n      return req;\n    };\n    return useSWRNext(key_, fetcher, config);\n  };\n};\nvar BUILT_IN_MIDDLEWARE = use.concat(middleware);\n\n// It's tricky to pass generic types as parameters, so we just directly override\n// the types here.\nvar withArgs = function withArgs(hook) {\n  return function useSWRArgs() {\n    // Get the default and inherited configuration.\n    var fallbackConfig = useSWRConfig();\n    // Normalize arguments.\n    for (var _len2 = arguments.length, args = new Array(_len2), _key3 = 0; _key3 < _len2; _key3++) {\n      args[_key3] = arguments[_key3];\n    }\n    var _normalize = normalize(args),\n      _normalize2 = _slicedToArray(_normalize, 3),\n      key = _normalize2[0],\n      fn = _normalize2[1],\n      _config = _normalize2[2];\n    // Merge configurations.\n    var config = mergeConfigs(fallbackConfig, _config);\n    // Apply middleware\n    var next = hook;\n    var use = config.use;\n    var middleware = (use || []).concat(BUILT_IN_MIDDLEWARE);\n    for (var i = middleware.length; i--;) {\n      next = middleware[i](next);\n    }\n    return next(key, fn || config.fetcher || null, config);\n  };\n};\n\n// Add a callback function to a list of keyed callback functions and return\n// the unsubscribe function.\nvar subscribeCallback = function subscribeCallback(key, callbacks, callback) {\n  var keyedRevalidators = callbacks[key] || (callbacks[key] = []);\n  keyedRevalidators.push(callback);\n  return function () {\n    var index = keyedRevalidators.indexOf(callback);\n    if (index >= 0) {\n      // O(1): faster than splice\n      keyedRevalidators[index] = keyedRevalidators[keyedRevalidators.length - 1];\n      keyedRevalidators.pop();\n    }\n  };\n};\n\n// Create a custom hook with a middleware\nvar withMiddleware = function withMiddleware(useSWR, middleware) {\n  return function () {\n    for (var _len3 = arguments.length, args = new Array(_len3), _key4 = 0; _key4 < _len3; _key4++) {\n      args[_key4] = arguments[_key4];\n    }\n    var _normalize3 = normalize(args),\n      _normalize4 = _slicedToArray(_normalize3, 3),\n      key = _normalize4[0],\n      fn = _normalize4[1],\n      config = _normalize4[2];\n    var uses = (config.use || []).concat(middleware);\n    return useSWR(key, fn, _objectSpread(_objectSpread({}, config), {}, {\n      use: uses\n    }));\n  };\n};\nsetupDevTools();\nexport { INFINITE_PREFIX, IS_REACT_LEGACY, IS_SERVER, OBJECT, SWRConfig, SWRGlobalState, UNDEFINED, cache, compare, createCacheHelper, defaultConfig, defaultConfigOptions, getTimestamp, hasRequestAnimationFrame, initCache, internalMutate, isDocumentDefined, isFunction, isPromiseLike, isUndefined, isWindowDefined, mergeConfigs, mergeObjects, mutate, noop, normalize, preload, preset, rAF, events as revalidateEvents, serialize, slowConnection, stableHash, subscribeCallback, useIsomorphicLayoutEffect, useSWRConfig, withArgs, withMiddleware };","map":{"version":3,"names":["React","useEffect","useLayoutEffect","createContext","useContext","useMemo","useRef","createElement","noop","UNDEFINED","OBJECT","Object","isUndefined","v","isFunction","mergeObjects","a","b","_objectSpread","isPromiseLike","x","then","table","WeakMap","counter","stableHash","arg","type","constructor","isDate","Date","result","index","RegExp","get","set","Array","length","keys","sort","pop","toJSON","toString","JSON","stringify","SWRGlobalState","EMPTY_CACHE","INITIAL_CACHE","STR_UNDEFINED","isWindowDefined","window","isDocumentDefined","document","hasRequestAnimationFrame","createCacheHelper","cache","key","state","info","prev","online","isOnline","_ref","addEventListener","bind","removeEventListener","_ref2","_slicedToArray","onWindowEvent","offWindowEvent","isVisible","visibilityState","initFocus","callback","initReconnect","onOnline","onOffline","preset","defaultConfigOptions","IS_REACT_LEGACY","useId","IS_SERVER","rAF","f","setTimeout","useIsomorphicLayoutEffect","navigatorConnection","navigator","connection","slowConnection","includes","effectiveType","saveData","serialize","err","args","isArray","__timestamp","getTimestamp","FOCUS_EVENT","RECONNECT_EVENT","MUTATE_EVENT","ERROR_REVALIDATE_EVENT","events","__proto__","internalMutate","_internalMutate","apply","arguments","_asyncToGenerator","_regeneratorRuntime","mark","_callee2","_len","_key2","_key","_data","_opts","options","populateCache","rollbackOnErrorOption","optimisticData","revalidate","rollbackOnError","throwOnError","keyFilter","matchedKeys","it","_iterator2","_step2","mutateByKey","_mutateByKey","_args2","wrap","_callee2$","_context2","next","_mutateByKey3","_callee","_k","_serialize5","_serialize6","_createCacheHelper","_createCacheHelper2","_SWRGlobalState$get5","_SWRGlobalState$get6","EVENT_REVALIDATORS","MUTATION","FETCH","PRELOAD","startRevalidate","data","error","beforeMutationTs","hasOptimisticData","displayedData","currentData","committedData","populateCachedData","_callee$","_context","abrupt","revalidators","_c","catch","sent","Promise","resolve","stop","_mutateByKey2","_x","_createForOfIteratorHelper","s","n","done","value","test","push","e","all","map","revalidateAllKeys","initCache","provider","has","opts","mutate","unmount","subscriptions","subscribe","subs","splice","indexOf","setter","_iterator","_step","fn","initProvider","releaseFocus","releaseReconnect","delete","onErrorRetry","_","__","config","maxRetryCount","errorRetryCount","currentRetryCount","retryCount","timeout","Math","random","errorRetryInterval","compare","newData","_initCache","Map","_initCache2","defaultConfig","onLoadingSlow","onSuccess","onError","onDiscarded","revalidateOnFocus","revalidateOnReconnect","revalidateIfStale","shouldRetryOnError","focusThrottleInterval","dedupingInterval","loadingTimeout","isPaused","fallback","mergeConfigs","u1","use","f1","u2","f2","concat","SWRConfigContext","SWRConfig","props","parentConfig","isFunctionalConfig","extendedConfig","cacheContextRef","current","cacheContext","Provider","INFINITE_PREFIX","enableDevtools","__SWR_DEVTOOLS_USE__","setupDevTools","__SWR_DEVTOOLS_REACT__","normalize","useSWRConfig","preload","key_","fetcher","_serialize","_serialize2","fnArg","_SWRGlobalState$get","_SWRGlobalState$get2","req","middleware","useSWRNext","fetcher_","_serialize3","_serialize4","_SWRGlobalState$get3","_SWRGlobalState$get4","startsWith","BUILT_IN_MIDDLEWARE","withArgs","hook","useSWRArgs","fallbackConfig","_len2","_key3","_normalize","_normalize2","_config","i","subscribeCallback","callbacks","keyedRevalidators","withMiddleware","useSWR","_len3","_key4","_normalize3","_normalize4","uses","revalidateEvents"],"sources":["C:/Users/admin/Desktop/an/sneaker/node_modules/swr/_internal/dist/index.mjs"],"sourcesContent":["import React, { useEffect, useLayoutEffect, createContext, useContext, useMemo, useRef, createElement } from 'react';\r\n\r\n// Shared state between server components and client components\r\nconst noop = ()=>{};\r\n// Using noop() as the undefined value as undefined can be replaced\r\n// by something else. Prettier ignore and extra parentheses are necessary here\r\n// to ensure that tsc doesn't remove the __NOINLINE__ comment.\r\n// prettier-ignore\r\nconst UNDEFINED = /*#__NOINLINE__*/ noop();\r\nconst OBJECT = Object;\r\nconst isUndefined = (v)=>v === UNDEFINED;\r\nconst isFunction = (v)=>typeof v == 'function';\r\nconst mergeObjects = (a, b)=>({\r\n        ...a,\r\n        ...b\r\n    });\r\nconst isPromiseLike = (x)=>isFunction(x.then);\r\n\r\n// use WeakMap to store the object->key mapping\r\n// so the objects can be garbage collected.\r\n// WeakMap uses a hashtable under the hood, so the lookup\r\n// complexity is almost O(1).\r\nconst table = new WeakMap();\r\n// counter of the key\r\nlet counter = 0;\r\n// A stable hash implementation that supports:\r\n// - Fast and ensures unique hash properties\r\n// - Handles unserializable values\r\n// - Handles object key ordering\r\n// - Generates short results\r\n//\r\n// This is not a serialization function, and the result is not guaranteed to be\r\n// parsable.\r\nconst stableHash = (arg)=>{\r\n    const type = typeof arg;\r\n    const constructor = arg && arg.constructor;\r\n    const isDate = constructor == Date;\r\n    let result;\r\n    let index;\r\n    if (OBJECT(arg) === arg && !isDate && constructor != RegExp) {\r\n        // Object/function, not null/date/regexp. Use WeakMap to store the id first.\r\n        // If it's already hashed, directly return the result.\r\n        result = table.get(arg);\r\n        if (result) return result;\r\n        // Store the hash first for circular reference detection before entering the\r\n        // recursive `stableHash` calls.\r\n        // For other objects like set and map, we use this id directly as the hash.\r\n        result = ++counter + '~';\r\n        table.set(arg, result);\r\n        if (constructor == Array) {\r\n            // Array.\r\n            result = '@';\r\n            for(index = 0; index < arg.length; index++){\r\n                result += stableHash(arg[index]) + ',';\r\n            }\r\n            table.set(arg, result);\r\n        }\r\n        if (constructor == OBJECT) {\r\n            // Object, sort keys.\r\n            result = '#';\r\n            const keys = OBJECT.keys(arg).sort();\r\n            while(!isUndefined(index = keys.pop())){\r\n                if (!isUndefined(arg[index])) {\r\n                    result += index + ':' + stableHash(arg[index]) + ',';\r\n                }\r\n            }\r\n            table.set(arg, result);\r\n        }\r\n    } else {\r\n        result = isDate ? arg.toJSON() : type == 'symbol' ? arg.toString() : type == 'string' ? JSON.stringify(arg) : '' + arg;\r\n    }\r\n    return result;\r\n};\r\n\r\n// Global state used to deduplicate requests and store listeners\r\nconst SWRGlobalState = new WeakMap();\r\n\r\nconst EMPTY_CACHE = {};\r\nconst INITIAL_CACHE = {};\r\nconst STR_UNDEFINED = 'undefined';\r\n// NOTE: Use the function to guarantee it's re-evaluated between jsdom and node runtime for tests.\r\nconst isWindowDefined = typeof window != STR_UNDEFINED;\r\nconst isDocumentDefined = typeof document != STR_UNDEFINED;\r\nconst hasRequestAnimationFrame = ()=>isWindowDefined && typeof window['requestAnimationFrame'] != STR_UNDEFINED;\r\nconst createCacheHelper = (cache, key)=>{\r\n    const state = SWRGlobalState.get(cache);\r\n    return [\r\n        // Getter\r\n        ()=>!isUndefined(key) && cache.get(key) || EMPTY_CACHE,\r\n        // Setter\r\n        (info)=>{\r\n            if (!isUndefined(key)) {\r\n                const prev = cache.get(key);\r\n                // Before writing to the store, we keep the value in the initial cache\r\n                // if it's not there yet.\r\n                if (!(key in INITIAL_CACHE)) {\r\n                    INITIAL_CACHE[key] = prev;\r\n                }\r\n                state[5](key, mergeObjects(prev, info), prev || EMPTY_CACHE);\r\n            }\r\n        },\r\n        // Subscriber\r\n        state[6],\r\n        // Get server cache snapshot\r\n        ()=>{\r\n            if (!isUndefined(key)) {\r\n                // If the cache was updated on the client, we return the stored initial value.\r\n                if (key in INITIAL_CACHE) return INITIAL_CACHE[key];\r\n            }\r\n            // If we haven't done any client-side updates, we return the current value.\r\n            return !isUndefined(key) && cache.get(key) || EMPTY_CACHE;\r\n        }\r\n    ];\r\n} // export { UNDEFINED, OBJECT, isUndefined, isFunction, mergeObjects, isPromiseLike }\r\n;\r\n\r\n/**\r\n * Due to the bug https://bugs.chromium.org/p/chromium/issues/detail?id=678075,\r\n * it's not reliable to detect if the browser is currently online or offline\r\n * based on `navigator.onLine`.\r\n * As a workaround, we always assume it's online on the first load, and change\r\n * the status upon `online` or `offline` events.\r\n */ let online = true;\r\nconst isOnline = ()=>online;\r\n// For node and React Native, `add/removeEventListener` doesn't exist on window.\r\nconst [onWindowEvent, offWindowEvent] = isWindowDefined && window.addEventListener ? [\r\n    window.addEventListener.bind(window),\r\n    window.removeEventListener.bind(window)\r\n] : [\r\n    noop,\r\n    noop\r\n];\r\nconst isVisible = ()=>{\r\n    const visibilityState = isDocumentDefined && document.visibilityState;\r\n    return isUndefined(visibilityState) || visibilityState !== 'hidden';\r\n};\r\nconst initFocus = (callback)=>{\r\n    // focus revalidate\r\n    if (isDocumentDefined) {\r\n        document.addEventListener('visibilitychange', callback);\r\n    }\r\n    onWindowEvent('focus', callback);\r\n    return ()=>{\r\n        if (isDocumentDefined) {\r\n            document.removeEventListener('visibilitychange', callback);\r\n        }\r\n        offWindowEvent('focus', callback);\r\n    };\r\n};\r\nconst initReconnect = (callback)=>{\r\n    // revalidate on reconnected\r\n    const onOnline = ()=>{\r\n        online = true;\r\n        callback();\r\n    };\r\n    // nothing to revalidate, just update the status\r\n    const onOffline = ()=>{\r\n        online = false;\r\n    };\r\n    onWindowEvent('online', onOnline);\r\n    onWindowEvent('offline', onOffline);\r\n    return ()=>{\r\n        offWindowEvent('online', onOnline);\r\n        offWindowEvent('offline', onOffline);\r\n    };\r\n};\r\nconst preset = {\r\n    isOnline,\r\n    isVisible\r\n};\r\nconst defaultConfigOptions = {\r\n    initFocus,\r\n    initReconnect\r\n};\r\n\r\nconst IS_REACT_LEGACY = !React.useId;\r\nconst IS_SERVER = !isWindowDefined || 'Deno' in window;\r\n// Polyfill requestAnimationFrame\r\nconst rAF = (f)=>hasRequestAnimationFrame() ? window['requestAnimationFrame'](f) : setTimeout(f, 1);\r\n// React currently throws a warning when using useLayoutEffect on the server.\r\n// To get around it, we can conditionally useEffect on the server (no-op) and\r\n// useLayoutEffect in the browser.\r\nconst useIsomorphicLayoutEffect = IS_SERVER ? useEffect : useLayoutEffect;\r\n// This assignment is to extend the Navigator type to use effectiveType.\r\nconst navigatorConnection = typeof navigator !== 'undefined' && navigator.connection;\r\n// Adjust the config based on slow connection status (<= 70Kbps).\r\nconst slowConnection = !IS_SERVER && navigatorConnection && ([\r\n    'slow-2g',\r\n    '2g'\r\n].includes(navigatorConnection.effectiveType) || navigatorConnection.saveData);\r\n\r\nconst serialize = (key)=>{\r\n    if (isFunction(key)) {\r\n        try {\r\n            key = key();\r\n        } catch (err) {\r\n            // dependencies not ready\r\n            key = '';\r\n        }\r\n    }\r\n    // Use the original key as the argument of fetcher. This can be a string or an\r\n    // array of values.\r\n    const args = key;\r\n    // If key is not falsy, or not an empty array, hash it.\r\n    key = typeof key == 'string' ? key : (Array.isArray(key) ? key.length : key) ? stableHash(key) : '';\r\n    return [\r\n        key,\r\n        args\r\n    ];\r\n};\r\n\r\n// Global timestamp.\r\nlet __timestamp = 0;\r\nconst getTimestamp = ()=>++__timestamp;\r\n\r\nconst FOCUS_EVENT = 0;\r\nconst RECONNECT_EVENT = 1;\r\nconst MUTATE_EVENT = 2;\r\nconst ERROR_REVALIDATE_EVENT = 3;\r\n\r\nvar events = {\r\n  __proto__: null,\r\n  ERROR_REVALIDATE_EVENT: ERROR_REVALIDATE_EVENT,\r\n  FOCUS_EVENT: FOCUS_EVENT,\r\n  MUTATE_EVENT: MUTATE_EVENT,\r\n  RECONNECT_EVENT: RECONNECT_EVENT\r\n};\r\n\r\nasync function internalMutate(...args) {\r\n    const [cache, _key, _data, _opts] = args;\r\n    // When passing as a boolean, it's explicitly used to disable/enable\r\n    // revalidation.\r\n    const options = mergeObjects({\r\n        populateCache: true,\r\n        throwOnError: true\r\n    }, typeof _opts === 'boolean' ? {\r\n        revalidate: _opts\r\n    } : _opts || {});\r\n    let populateCache = options.populateCache;\r\n    const rollbackOnErrorOption = options.rollbackOnError;\r\n    let optimisticData = options.optimisticData;\r\n    const revalidate = options.revalidate !== false;\r\n    const rollbackOnError = (error)=>{\r\n        return typeof rollbackOnErrorOption === 'function' ? rollbackOnErrorOption(error) : rollbackOnErrorOption !== false;\r\n    };\r\n    const throwOnError = options.throwOnError;\r\n    // If the second argument is a key filter, return the mutation results for all\r\n    // filtered keys.\r\n    if (isFunction(_key)) {\r\n        const keyFilter = _key;\r\n        const matchedKeys = [];\r\n        const it = cache.keys();\r\n        for (const key of it){\r\n            if (// Skip the special useSWRInfinite and useSWRSubscription keys.\r\n            !/^\\$(inf|sub)\\$/.test(key) && keyFilter(cache.get(key)._k)) {\r\n                matchedKeys.push(key);\r\n            }\r\n        }\r\n        return Promise.all(matchedKeys.map(mutateByKey));\r\n    }\r\n    return mutateByKey(_key);\r\n    async function mutateByKey(_k) {\r\n        // Serialize key\r\n        const [key] = serialize(_k);\r\n        if (!key) return;\r\n        const [get, set] = createCacheHelper(cache, key);\r\n        const [EVENT_REVALIDATORS, MUTATION, FETCH, PRELOAD] = SWRGlobalState.get(cache);\r\n        const startRevalidate = ()=>{\r\n            const revalidators = EVENT_REVALIDATORS[key];\r\n            if (revalidate) {\r\n                // Invalidate the key by deleting the concurrent request markers so new\r\n                // requests will not be deduped.\r\n                delete FETCH[key];\r\n                delete PRELOAD[key];\r\n                if (revalidators && revalidators[0]) {\r\n                    return revalidators[0](MUTATE_EVENT).then(()=>get().data);\r\n                }\r\n            }\r\n            return get().data;\r\n        };\r\n        // If there is no new data provided, revalidate the key with current state.\r\n        if (args.length < 3) {\r\n            // Revalidate and broadcast state.\r\n            return startRevalidate();\r\n        }\r\n        let data = _data;\r\n        let error;\r\n        // Update global timestamps.\r\n        const beforeMutationTs = getTimestamp();\r\n        MUTATION[key] = [\r\n            beforeMutationTs,\r\n            0\r\n        ];\r\n        const hasOptimisticData = !isUndefined(optimisticData);\r\n        const state = get();\r\n        // `displayedData` is the current value on screen. It could be the optimistic value\r\n        // that is going to be overridden by a `committedData`, or get reverted back.\r\n        // `committedData` is the validated value that comes from a fetch or mutation.\r\n        const displayedData = state.data;\r\n        const currentData = state._c;\r\n        const committedData = isUndefined(currentData) ? displayedData : currentData;\r\n        // Do optimistic data update.\r\n        if (hasOptimisticData) {\r\n            optimisticData = isFunction(optimisticData) ? optimisticData(committedData, displayedData) : optimisticData;\r\n            // When we set optimistic data, backup the current committedData data in `_c`.\r\n            set({\r\n                data: optimisticData,\r\n                _c: committedData\r\n            });\r\n        }\r\n        if (isFunction(data)) {\r\n            // `data` is a function, call it passing current cache value.\r\n            try {\r\n                data = data(committedData);\r\n            } catch (err) {\r\n                // If it throws an error synchronously, we shouldn't update the cache.\r\n                error = err;\r\n            }\r\n        }\r\n        // `data` is a promise/thenable, resolve the final data first.\r\n        if (data && isPromiseLike(data)) {\r\n            // This means that the mutation is async, we need to check timestamps to\r\n            // avoid race conditions.\r\n            data = await data.catch((err)=>{\r\n                error = err;\r\n            });\r\n            // Check if other mutations have occurred since we've started this mutation.\r\n            // If there's a race we don't update cache or broadcast the change,\r\n            // just return the data.\r\n            if (beforeMutationTs !== MUTATION[key][0]) {\r\n                if (error) throw error;\r\n                return data;\r\n            } else if (error && hasOptimisticData && rollbackOnError(error)) {\r\n                // Rollback. Always populate the cache in this case but without\r\n                // transforming the data.\r\n                populateCache = true;\r\n                // Reset data to be the latest committed data, and clear the `_c` value.\r\n                set({\r\n                    data: committedData,\r\n                    _c: UNDEFINED\r\n                });\r\n            }\r\n        }\r\n        // If we should write back the cache after request.\r\n        if (populateCache) {\r\n            if (!error) {\r\n                // Transform the result into data.\r\n                if (isFunction(populateCache)) {\r\n                    const populateCachedData = populateCache(data, committedData);\r\n                    set({\r\n                        data: populateCachedData,\r\n                        error: UNDEFINED,\r\n                        _c: UNDEFINED\r\n                    });\r\n                } else {\r\n                    // Only update cached data and reset the error if there's no error. Data can be `undefined` here.\r\n                    set({\r\n                        data,\r\n                        error: UNDEFINED,\r\n                        _c: UNDEFINED\r\n                    });\r\n                }\r\n            }\r\n        }\r\n        // Reset the timestamp to mark the mutation has ended.\r\n        MUTATION[key][1] = getTimestamp();\r\n        // Update existing SWR Hooks' internal states:\r\n        Promise.resolve(startRevalidate()).then(()=>{\r\n            // The mutation and revalidation are ended, we can clear it since the data is\r\n            // not an optimistic value anymore.\r\n            set({\r\n                _c: UNDEFINED\r\n            });\r\n        });\r\n        // Throw error or return data\r\n        if (error) {\r\n            if (throwOnError) throw error;\r\n            return;\r\n        }\r\n        return data;\r\n    }\r\n}\r\n\r\nconst revalidateAllKeys = (revalidators, type)=>{\r\n    for(const key in revalidators){\r\n        if (revalidators[key][0]) revalidators[key][0](type);\r\n    }\r\n};\r\nconst initCache = (provider, options)=>{\r\n    // The global state for a specific provider will be used to deduplicate\r\n    // requests and store listeners. As well as a mutate function that is bound to\r\n    // the cache.\r\n    // The provider's global state might be already initialized. Let's try to get the\r\n    // global state associated with the provider first.\r\n    if (!SWRGlobalState.has(provider)) {\r\n        const opts = mergeObjects(defaultConfigOptions, options);\r\n        // If there's no global state bound to the provider, create a new one with the\r\n        // new mutate function.\r\n        const EVENT_REVALIDATORS = {};\r\n        const mutate = internalMutate.bind(UNDEFINED, provider);\r\n        let unmount = noop;\r\n        const subscriptions = {};\r\n        const subscribe = (key, callback)=>{\r\n            const subs = subscriptions[key] || [];\r\n            subscriptions[key] = subs;\r\n            subs.push(callback);\r\n            return ()=>subs.splice(subs.indexOf(callback), 1);\r\n        };\r\n        const setter = (key, value, prev)=>{\r\n            provider.set(key, value);\r\n            const subs = subscriptions[key];\r\n            if (subs) {\r\n                for (const fn of subs){\r\n                    fn(value, prev);\r\n                }\r\n            }\r\n        };\r\n        const initProvider = ()=>{\r\n            if (!SWRGlobalState.has(provider)) {\r\n                // Update the state if it's new, or if the provider has been extended.\r\n                SWRGlobalState.set(provider, [\r\n                    EVENT_REVALIDATORS,\r\n                    {},\r\n                    {},\r\n                    {},\r\n                    mutate,\r\n                    setter,\r\n                    subscribe\r\n                ]);\r\n                if (!IS_SERVER) {\r\n                    // When listening to the native events for auto revalidations,\r\n                    // we intentionally put a delay (setTimeout) here to make sure they are\r\n                    // fired after immediate JavaScript executions, which can be\r\n                    // React's state updates.\r\n                    // This avoids some unnecessary revalidations such as\r\n                    // https://github.com/vercel/swr/issues/1680.\r\n                    const releaseFocus = opts.initFocus(setTimeout.bind(UNDEFINED, revalidateAllKeys.bind(UNDEFINED, EVENT_REVALIDATORS, FOCUS_EVENT)));\r\n                    const releaseReconnect = opts.initReconnect(setTimeout.bind(UNDEFINED, revalidateAllKeys.bind(UNDEFINED, EVENT_REVALIDATORS, RECONNECT_EVENT)));\r\n                    unmount = ()=>{\r\n                        releaseFocus && releaseFocus();\r\n                        releaseReconnect && releaseReconnect();\r\n                        // When un-mounting, we need to remove the cache provider from the state\r\n                        // storage too because it's a side-effect. Otherwise, when re-mounting we\r\n                        // will not re-register those event listeners.\r\n                        SWRGlobalState.delete(provider);\r\n                    };\r\n                }\r\n            }\r\n        };\r\n        initProvider();\r\n        // This is a new provider, we need to initialize it and setup DOM events\r\n        // listeners for `focus` and `reconnect` actions.\r\n        // We might want to inject an extra layer on top of `provider` in the future,\r\n        // such as key serialization, auto GC, etc.\r\n        // For now, it's just a `Map` interface without any modifications.\r\n        return [\r\n            provider,\r\n            mutate,\r\n            initProvider,\r\n            unmount\r\n        ];\r\n    }\r\n    return [\r\n        provider,\r\n        SWRGlobalState.get(provider)[4]\r\n    ];\r\n};\r\n\r\n// error retry\r\nconst onErrorRetry = (_, __, config, revalidate, opts)=>{\r\n    const maxRetryCount = config.errorRetryCount;\r\n    const currentRetryCount = opts.retryCount;\r\n    // Exponential backoff\r\n    const timeout = ~~((Math.random() + 0.5) * (1 << (currentRetryCount < 8 ? currentRetryCount : 8))) * config.errorRetryInterval;\r\n    if (!isUndefined(maxRetryCount) && currentRetryCount > maxRetryCount) {\r\n        return;\r\n    }\r\n    setTimeout(revalidate, timeout, opts);\r\n};\r\nconst compare = (currentData, newData)=>stableHash(currentData) == stableHash(newData);\r\n// Default cache provider\r\nconst [cache, mutate] = initCache(new Map());\r\n// Default config\r\nconst defaultConfig = mergeObjects({\r\n    // events\r\n    onLoadingSlow: noop,\r\n    onSuccess: noop,\r\n    onError: noop,\r\n    onErrorRetry,\r\n    onDiscarded: noop,\r\n    // switches\r\n    revalidateOnFocus: true,\r\n    revalidateOnReconnect: true,\r\n    revalidateIfStale: true,\r\n    shouldRetryOnError: true,\r\n    // timeouts\r\n    errorRetryInterval: slowConnection ? 10000 : 5000,\r\n    focusThrottleInterval: 5 * 1000,\r\n    dedupingInterval: 2 * 1000,\r\n    loadingTimeout: slowConnection ? 5000 : 3000,\r\n    // providers\r\n    compare,\r\n    isPaused: ()=>false,\r\n    cache,\r\n    mutate,\r\n    fallback: {}\r\n}, // use web preset by default\r\npreset);\r\n\r\nconst mergeConfigs = (a, b)=>{\r\n    // Need to create a new object to avoid mutating the original here.\r\n    const v = mergeObjects(a, b);\r\n    // If two configs are provided, merge their `use` and `fallback` options.\r\n    if (b) {\r\n        const { use: u1, fallback: f1 } = a;\r\n        const { use: u2, fallback: f2 } = b;\r\n        if (u1 && u2) {\r\n            v.use = u1.concat(u2);\r\n        }\r\n        if (f1 && f2) {\r\n            v.fallback = mergeObjects(f1, f2);\r\n        }\r\n    }\r\n    return v;\r\n};\r\n\r\nconst SWRConfigContext = createContext({});\r\nconst SWRConfig = (props)=>{\r\n    const { value } = props;\r\n    const parentConfig = useContext(SWRConfigContext);\r\n    const isFunctionalConfig = isFunction(value);\r\n    const config = useMemo(()=>isFunctionalConfig ? value(parentConfig) : value, [\r\n        isFunctionalConfig,\r\n        parentConfig,\r\n        value\r\n    ]);\r\n    // Extend parent context values and middleware.\r\n    const extendedConfig = useMemo(()=>isFunctionalConfig ? config : mergeConfigs(parentConfig, config), [\r\n        isFunctionalConfig,\r\n        parentConfig,\r\n        config\r\n    ]);\r\n    // Should not use the inherited provider.\r\n    const provider = config && config.provider;\r\n    // initialize the cache only on first access.\r\n    const cacheContextRef = useRef(UNDEFINED);\r\n    if (provider && !cacheContextRef.current) {\r\n        cacheContextRef.current = initCache(provider(extendedConfig.cache || cache), config);\r\n    }\r\n    const cacheContext = cacheContextRef.current;\r\n    // Override the cache if a new provider is given.\r\n    if (cacheContext) {\r\n        extendedConfig.cache = cacheContext[0];\r\n        extendedConfig.mutate = cacheContext[1];\r\n    }\r\n    // Unsubscribe events.\r\n    useIsomorphicLayoutEffect(()=>{\r\n        if (cacheContext) {\r\n            cacheContext[2] && cacheContext[2]();\r\n            return cacheContext[3];\r\n        }\r\n    }, []);\r\n    return createElement(SWRConfigContext.Provider, mergeObjects(props, {\r\n        value: extendedConfig\r\n    }));\r\n};\r\n\r\nconst INFINITE_PREFIX = '$inf$';\r\n\r\n// @ts-expect-error\r\nconst enableDevtools = isWindowDefined && window.__SWR_DEVTOOLS_USE__;\r\nconst use = enableDevtools ? window.__SWR_DEVTOOLS_USE__ : [];\r\nconst setupDevTools = ()=>{\r\n    if (enableDevtools) {\r\n        // @ts-expect-error\r\n        window.__SWR_DEVTOOLS_REACT__ = React;\r\n    }\r\n};\r\n\r\nconst normalize = (args)=>{\r\n    return isFunction(args[1]) ? [\r\n        args[0],\r\n        args[1],\r\n        args[2] || {}\r\n    ] : [\r\n        args[0],\r\n        null,\r\n        (args[1] === null ? args[2] : args[1]) || {}\r\n    ];\r\n};\r\n\r\nconst useSWRConfig = ()=>{\r\n    return mergeObjects(defaultConfig, useContext(SWRConfigContext));\r\n};\r\n\r\nconst preload = (key_, fetcher)=>{\r\n    const [key, fnArg] = serialize(key_);\r\n    const [, , , PRELOAD] = SWRGlobalState.get(cache);\r\n    // Prevent preload to be called multiple times before used.\r\n    if (PRELOAD[key]) return PRELOAD[key];\r\n    const req = fetcher(fnArg);\r\n    PRELOAD[key] = req;\r\n    return req;\r\n};\r\nconst middleware = (useSWRNext)=>(key_, fetcher_, config)=>{\r\n        // fetcher might be a sync function, so this should not be an async function\r\n        const fetcher = fetcher_ && ((...args)=>{\r\n            const [key] = serialize(key_);\r\n            const [, , , PRELOAD] = SWRGlobalState.get(cache);\r\n            if (key.startsWith(INFINITE_PREFIX)) {\r\n                // we want the infinite fetcher to be called.\r\n                // handling of the PRELOAD cache happens there.\r\n                return fetcher_(...args);\r\n            }\r\n            const req = PRELOAD[key];\r\n            if (isUndefined(req)) return fetcher_(...args);\r\n            delete PRELOAD[key];\r\n            return req;\r\n        });\r\n        return useSWRNext(key_, fetcher, config);\r\n    };\r\n\r\nconst BUILT_IN_MIDDLEWARE = use.concat(middleware);\r\n\r\n// It's tricky to pass generic types as parameters, so we just directly override\r\n// the types here.\r\nconst withArgs = (hook)=>{\r\n    return function useSWRArgs(...args) {\r\n        // Get the default and inherited configuration.\r\n        const fallbackConfig = useSWRConfig();\r\n        // Normalize arguments.\r\n        const [key, fn, _config] = normalize(args);\r\n        // Merge configurations.\r\n        const config = mergeConfigs(fallbackConfig, _config);\r\n        // Apply middleware\r\n        let next = hook;\r\n        const { use } = config;\r\n        const middleware = (use || []).concat(BUILT_IN_MIDDLEWARE);\r\n        for(let i = middleware.length; i--;){\r\n            next = middleware[i](next);\r\n        }\r\n        return next(key, fn || config.fetcher || null, config);\r\n    };\r\n};\r\n\r\n// Add a callback function to a list of keyed callback functions and return\r\n// the unsubscribe function.\r\nconst subscribeCallback = (key, callbacks, callback)=>{\r\n    const keyedRevalidators = callbacks[key] || (callbacks[key] = []);\r\n    keyedRevalidators.push(callback);\r\n    return ()=>{\r\n        const index = keyedRevalidators.indexOf(callback);\r\n        if (index >= 0) {\r\n            // O(1): faster than splice\r\n            keyedRevalidators[index] = keyedRevalidators[keyedRevalidators.length - 1];\r\n            keyedRevalidators.pop();\r\n        }\r\n    };\r\n};\r\n\r\n// Create a custom hook with a middleware\r\nconst withMiddleware = (useSWR, middleware)=>{\r\n    return (...args)=>{\r\n        const [key, fn, config] = normalize(args);\r\n        const uses = (config.use || []).concat(middleware);\r\n        return useSWR(key, fn, {\r\n            ...config,\r\n            use: uses\r\n        });\r\n    };\r\n};\r\n\r\nsetupDevTools();\r\n\r\nexport { INFINITE_PREFIX, IS_REACT_LEGACY, IS_SERVER, OBJECT, SWRConfig, SWRGlobalState, UNDEFINED, cache, compare, createCacheHelper, defaultConfig, defaultConfigOptions, getTimestamp, hasRequestAnimationFrame, initCache, internalMutate, isDocumentDefined, isFunction, isPromiseLike, isUndefined, isWindowDefined, mergeConfigs, mergeObjects, mutate, noop, normalize, preload, preset, rAF, events as revalidateEvents, serialize, slowConnection, stableHash, subscribeCallback, useIsomorphicLayoutEffect, useSWRConfig, withArgs, withMiddleware };\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}